using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.Hosting;
using Serilog;
using Serilog.Exceptions;
using System;

var builder = WebApplication.CreateBuilder(args);

builder.Host.UseSerilog((context, services, configuration) =>
    configuration.ReadFrom.Configuration(context.Configuration));

var app = builder.Build();

app.UseSerilogRequestLogging();

app.MapGet("/", () =>
{
    Log.Information("This is an informational message");
    Log.Warning("This is a warning about a potential problem");
    Log.Error("This is an example of an error");
    Log.Fatal("This is a fatal error that needs immediate attention");

    var user = new { Name = "Martin", Age = 30 };

    Log.Debug("User {@User} entered the system at {Time}", user, DateTime.Now);

    try
    {
        throw new InvalidOperationException("A critical error has occurred!");
    }
    catch (Exception ex)
    {
        Log.Error(ex, "Handled exception: {ErrorMessage}", ex.Message);
    }

    return "This is an example of using Serilog in ASP.NET Core!";
});

app.Run();
